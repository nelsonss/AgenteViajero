install.package('devtools')
install.packages('devtools')
install.package('ggplot')
install.packages('ggplot')
install.packages(c("coin", "sandwich", "zoo"))
install.packages('ggplot2')
library(devtools)
install.packages('devtools')
install.packages("devtools")
install_github("cstubben/trinotateR")
install_github("trinotateR")
library(trinotateR)
install_github()
?install_github()
install.packages("install_github()")
install.packages("install_github()")
install.packages("install_github")
library(trinotateR)
install_github("cstubben/trinotateR")
library(devtools)
install_github("cstubben/trinotateR")
library(trinotateR)
x <- read_trinotate("Trinotate_report.xls")
library(data.table)
x <- read_trinotate("Trinotate_report.xls")
library(trinotateR)
x <- read_trinotate("Trinotate_report.xls")
install.packages("data.table")
install.packages("data.table")
x <- read_trinotate("Trinotate_report.xls")
library(trinotateR)
library(devtools)
install_github("cstubben/trinotateR")
library(trinotateR)
x <- read_trinotate("Trinotate_report.xls")
library(readxl)
Trinotate_report <- read_excel("F:/[Bio-UJTL]/Trinotate_report.xls")
View(Trinotate_report)
x <- read_trinotate("Trinotate_report.xls")
x <- read_trinotate("F:/[Bio-UJTL]/Trinotate_report.xls")
summary_trinotate(x)
na.omit(x$Pfam)[1:2]
x1 <- split_pfam(x)
head(x1,3)
x2 <- summary_pfam(x1)
head(x2)
attr(x2, "count")
library(DT)
library(DT)
install.packages('DT')
library(DT)
z <- data.frame(x2)
z$pfam <- paste0('<a href="http://pfam.xfam.org/family/', z$pfam, '">', z$pfam,  '</a>')
datatable(z , escape=1, options = list( pageLength = 25 ) )
if (!require("DT")) install.packages('DT')
if (!require("DT"))
if (!require("DT")) install.packages('DT')
if (!require("devtools")) install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
history()
# Trinotate annotation report summaries in R
if (!require("devtools")) install.packages("devtools")
library(devtools)
if (!require("install_github")) install.packages("install_github")
if (!require("data.table")) install.packages("data.table")
if (!require("DT")) install.packages('DT')
library(data.table)
library(trinotateR)
library(DT)
x <- read_trinotate("F:/[Bio-UJTL]/Trinotate_report.xls")
summary_trinotate(x)
na.omit(x$Pfam)[1:2]
x1 <- split_pfam(x)
head(x1,3)
x2 <- summary_pfam(x1)
head(x2)
attr(x2, "count")
z <- data.frame(x2)
z$pfam <- paste0('<a href="http://pfam.xfam.org/family/', z$pfam, '">', z$pfam,  '</a>')
datatable(z , escape=1, options = list( pageLength = 25 ) )
source("http://bioconductor.org/workflows.R")
workflowInstall("rnaseqGene")
sumar<- function (x,y=1){
x+y
}
sumar(4,5)
sumar(3,7)
# Construct star_wars_matrix
box_office <- c(460.998, 314.4, 290.475, 247.900, 309.306, 165.8)
star_wars_matrix <- matrix(box_office, nrow = 3, byrow = TRUE,
dimnames = list(c("A New Hope", "The Empire Strikes Back", "Return of the Jedi"),
c("US", "non-US")))
# Calculate worldwide box office figures
worldwide_vector <- rowSums(star_wars_matrix)
)
# Construct star_wars_matrix
box_office <- c(460.998, 314.4, 290.475, 247.900, 309.306, 165.8)
star_wars_matrix <- matrix(box_office, nrow = 3, byrow = TRUE,
dimnames = list(c("A New Hope", "The Empire Strikes Back", "Return of the Jedi"),
c("US", "non-US")))
# Calculate worldwide box office figures
worldwide_vector <- rowSums(star_wars_matrix)
box_office <- c(460.998, 314.4, 290.475, 247.900, 309.306, 165.8)
)
box_office <- c(460.998, 314.4, 290.475, 247.900, 309.306, 165.8)
box_office
star_wars_matrix <- matrix(box_office, nrow = 3, byrow = TRUE,
dimnames = list(c("A New Hope", "The Empire Strikes Back", "Return of the Jedi"),
c("US", "non-US")))
star_wars_matrix
worldwide_vector <- rowSums(star_wars_matrix)
worldwide_vector
pioneers <- c("GAUSS:1777", "BAYES:1702", "PASCAL:1623", "PEARSON:1857")
pioneers
# Split names from birth year
split_math <- strsplit(pioneers, split = ":")
# Convert to lowercase strings: split_low
split_low <- lapply(split_math, tolower)
# Take a look at the structure of split_low
str(split_low)
split_math
library(devtools)
install_github("ggobi/ggally")
data(flea)
data(flea)
p_ <- GGally::print_if_interactive
data(flea)
install_github("ggobi/ggally")
data(flea)
data(flea)
data("flea")
install.packages("GGally")
data(flea)
library(devtools)
data(flea)
library("GGally")
data(flea)
ggpairs(flea, columns = 2:4)
pm <- ggpairs(flea, columns = 2:4, ggplot2::aes(colour=species))
p_(pm)
p_ <- GGally::print_if_interactive
p_(pm)
pm <- ggpairs(tips, 1:3, columnLabels = c("Total Bill", "Tip", "Sex"))
data(tips, package = "reshape")
pm <- ggpairs(tips[, 1:3])
p_(pm)
pm <- ggpairs(tips, 1:3, columnLabels = c("Total Bill", "Tip", "Sex"))
p_(pm)
data(diamonds, package="ggplot2")
diamonds.samp <- diamonds[sample(1:dim(diamonds)[1], 1000), ]
pm <- ggpairs(
diamonds.samp[, 1:5],
mapping = ggplot2::aes(color = cut),
upper = list(continuous = wrap("density", alpha = 0.5), combo = "box_no_facet"),
lower = list(continuous = wrap("points", alpha = 0.3), combo = wrap("dot_no_facet", alpha = 0.4)),
title = "Diamonds"
)
p_(pm)
pm <- ggpairs(
diamonds.samp[, 1:5],
mapping = ggplot2::aes(color = cut),
upper = list(continuous = wrap("density", alpha = 0.5), combo = "box_no_facet"),
lower = list(continuous = wrap("points", alpha = 0.3), combo = wrap("dot_no_facet", alpha = 0.4)),
title = "Diamonds"
)
library(qdap)
install.packages("qdap")
library(qdap)
new_text
text <- "Text mining usually involves the process of structuring the input text. The overarching goal is, essentially, to turn text into data for analysis, via application of natural language processing (NLP) and analytical methods."
text
term_count <- freq_terms(text, 10)
plot(term_count)
library(readr)
coffee <- read_csv("I:/[DataScience-DataCamp-Courses]/[Capstone Projects]/bagWords/coffee.csv")
View(coffee)
tweets <- read.csv("coffee.csv", stringsAsFactors = FALSE)
tweets <- read.csv("coffee.csv", stringsAsFactors = FALSE)
tweets <- read_csv("I:/[DataScience-DataCamp-Courses]/[Capstone Projects]/bagWords/coffee.csv",stringsAsFactors = FALSE)
tweets <- read.csv("I:/[DataScience-DataCamp-Courses]/[Capstone Projects]/bagWords/coffee.csv",stringsAsFactors = FALSE)
str(tweets)
nrow(tweets)
coffee_tweets<-tweets$text
coffee_tweets
library(tm)
coffee_source <- VectorSource(coffee_tweets
)
coffee_corpus <- VCorpus(coffee_source)
coffee_corpus
coffee_corpus[[15]]
coffee_corpus[[15]][1]
example_text
text
df_source <- DataframeSource(text[, 2:3])
install.packages(c("shiny", "maps", "geosphere"), repos="http://cran.rstudio.com/")
library(shiny)
runGitHub("shiny-salesman", "toddwschneider")
install.packages('rsconnect')
rsconnect::setAccountInfo(name='nelsonss',
token='36442498B21B3C0A25B7A76D9512256D',
secret='<SECRET>')
rsconnect::setAccountInfo(name='nelsonss', token='36442498B21B3C0A25B7A76D9512256D', secret='6VA6vuB486If9fURJGAv/BDFoivhZpu4snbzRhNK')
cities = readRDS("I:\[DataScience-edX]\2017-SimulationAnnealing\shiny-salesman-master\data\cities.rds")
cities = readRDS("I:\[DataScience-edX]\2017-SimulationAnnealing\shiny-salesman-master\data\cities.rds")
cities = readRDS("C:\Temporal\shiny-salesman-master\data\cities.rds")
cities = readRDS("C:\Temporal\shiny-salesman-master\data\cities.rds")
cities= readRDS("C:\\Temporal\\shiny-salesman-master\\data\\cities.rds")
cities
cities = readRDS("I:\[DataScience-edX]\2017-SimulationAnnealing\shiny-salesman-master\data\cities.rds")
distance_matrix = readRDS("I:\[DataScience-edX]\2017-SimulationAnnealing\shiny-salesman-master\data\distance_matrix.rds")
great_circles = readRDS("I:\[DataScience-edX]\2017-SimulationAnnealing\shiny-salesman-master\data\great_circles.rds")
usa_cities = readRDS("I:\[DataScience-edX]\2017-SimulationAnnealing\shiny-salesman-master\data\usa_cities.rds")
cities = readRDS("C:\\Temporal\\shiny-salesman-master\\data\\cities.rds")
distance_matrix = readRDS("C:\\Temporal\\shiny-salesman-master\\data\\distance_matrix.rds")
great_circles = readRDS("C:\\Temporal\\shiny-salesman-master\\data\\great_circles.rds")
usa_cities = readRDS("C:\\Temporal\\shiny-salesman-master\\data\\usa_cities.rds")
View(distance_matrix)
View(distance_matrix)
distance_matrix
great_circle
great_circles
head(great_circles)
cities = readRDS("C:\\Temporal\\shiny-salesman-master\\data\\cities.rds")
distance_matrix = readRDS("C:\\Temporal\\shiny-salesman-master\\data\\distance_matrix.rds")
great_circles = readRDS("C:\\Temporal\\shiny-salesman-master\\data\\great_circles.rds")
usa_cities = readRDS("C:\\Temporal\\shiny-salesman-master\\data\\usa_cities.rds")
usa_cities
cities
candidates = usa_cities
cities = candidates[sample(nrow(candidates), 1),]
cities
candidates = subset(candidates, !(full.name %in% cities$full.name))
candidates
full.name %in% cities$full.name
cities
cities$full.name
nrow(cities)
rbind(cities, candidate)[, c("long", "lat")]
candidate = candidates[sample(nrow(candidates), 1),]
View(candidate)
View(candidate)
rbind(cities, candidate)
rbind(cities, candidate)[, c("long", "lat")])
rbind(cities, candidate)
rbind(cities, candidate)[, c("long", "lat")]
candidate_dist_matrix = distm(rbind(cities, candidate)[, c("long", "lat")]) * miles_per_meter
library(geosphere)
candidate_dist_matrix = distm(rbind(cities, candidate)[, c("long", "lat")]) * miles_per_meter
miles_per_meter = 100 / 2.54 / 12 / 5280
candidate_dist_matrix = distm(rbind(cities, candidate)[, c("long", "lat")]) * miles_per_meter
candidate_dist_matrix
candidate_dist_matrix > 0
min_dist = 250
candidate_dist_matrix[candidate_dist_matrix > 0]
min(candidate_dist_matrix[candidate_dist_matrix > 0]) > min_dist
View(candidate)
rbind(cities, candidate)
cities
cities
cities = rbind(cities, candidate)
cities
cities = cities[order(cities$full.name),]
cities
1:nrow(cities)
cities$n = 1:nrow(cities)
cities$n
cities
map("world", col="#f3f3f3", fill=TRUE, lwd=0.2, mar=margins)
library(maps)
map("world", col="#f3f3f3", fill=TRUE, lwd=0.2, mar=margins)
library(shiny)
runGitHub("shiny-salesman", "toddwschneider")
runGitHub("AgenteViajero", "nelsonss")
runGitHub("AgenteViajero", "nelsonss")
runUrl("https://github.com/nelsonss/AgenteViajero/archive/master.zip")
runApp()
runGitHub("AgenteViajero", "nelsonss")
runGitHub("AgenteViajero", "nelsonss","AgenteViajero"
)
runGitHub("AgenteViajero", "nelsonss",subdir ="AgenteViajero")
runGitHub("AgenteViajero", "nelsonss")
runGitHub("AgenteViajero", "nelsonss")
runGitHub("AgenteViajero", "nelsonss")
runGitHub("AgenteViajero", "nelsonss")
runGitHub("AgenteViajero", "nelsonss")
runGitHub("AgenteViajero", "nelsonss")
runGitHub("AgenteViajero", "nelsonss")
runGitHub("AgenteViajero", "nelsonss")
runGitHub("AgenteViajero", "nelsonss")
runGitHub("AgenteViajero", "nelsonss")
runGitHub("AgenteViajero", "nelsonss")
runGitHub("AgenteViajero", "nelsonss")
runGitHub("AgenteViajero", "nelsonss")
View(distance_matrix)
View(distance_matrix)
setwd("~/GitHub/AgenteViajero/data")
saveRDS(DistanciasEntreCiudades.csv, "DistanciasEntreCiudades.rds")
D <- read.csv("DistmaciasEntreCiudades.csv",header=T, sep = ",")
D <- read.csv("DistanciasEntreCiudades.csv",header=T, sep = ",")
D
D <- read.csv("DistanciasEntreCiudades.csv",header=T, sep = ",")
saveRDS(D, "DistanciasEntreCiudades.rds")
DistanciasEntreCiudades = readRDS("DistanciasEntreCiudades.rds")
View(DistanciasEntreCiudades)
View(DistanciasEntreCiudades)
runGitHub("AgenteViajero", "nelsonss")
runGitHub("AgenteViajero", "nelsonss")
library(shiny)
runGitHub("AgenteViajero", "nelsonss")
runGitHub("AgenteViajero", "nelsonss")
runGitHub("AgenteViajero", "nelsonss")
if (!exists("all_cities")) all_cities = readRDS("data/cities.rds")
View(all_cities)
View(all_cities)
str(all_cities)
if (!exists("usa_cities")) usa_cities = readRDS("data/usa_cities.rds")
View(usa_cities)
View(usa_cities)
str(usa_cities)
str(usa_cities)
glipse(usa_cities)
str(usa_cities)
library(maps)
great_circles = readRDS("data/great_circles.rds")
great_circles = readRDS("great_circles.rds")
runGitHub("AgenteViajero", "nelsonss")
saveRDS(usa_cities, "usaCities.rds")
xy <- rbind(c(0,0),c(90,90),c(10,10),c(-120,-45))
xy
distm(xy)
m = map("state", fill = TRUE, plot = FALSE)
area.map(m, c("North Dakota", "South Dakota"))
m = map("state", proj="bonne", param=45, fill=TRUE, plot=FALSE)
install.packages(mapproj)
install.packages("mapproj")
library(mapproj)
m = map("state", proj="bonne", param=45, fill=TRUE, plot=FALSE)
area.map(m, "North Dakota")
distm(vals$cities[,c("long", "lat")])
cities[,c("long", "lat")])
cities
cities[,c("long", "lat")])
cities[,c("long", "lat")]
cities$name
list(vals$cities$name, vals$cities$name)
list(cities$name, cities$name)
cities[,c("long", "lat")]
distm(cities[,c("long", "lat")])
usa_cities
subset(usa_cities, full.name %in% seed_cities)
seed_cities
subset(usa_cities, full.name %in% seed_cities)
cty
cty =subset(usa_cities, full.name %in% seed_cities)
cty
cty$n = 1:nrow(cty)
View(distance_matrix)
View(distance_matrix)
candidates = usa_cities
sample(nrow(candidates)
)
sample(nrow(candidates),1)
candidates[sample(nrow(candidates), 1),]
cities = candidates[sample(nrow(candidates), 1),]
cities
runGitHub("AgenteViajero", "nelsonss")
cities
nrow(cities)
cities
candidates
candidate = candidates[sample(nrow(candidates), 1),]
candidate
rbind(cities, candidate)[, c("long", "lat")]
distm(rbind(cities, candidate)[, c("long", "lat")])
miles_per_meter = 100 / 2.54 / 12 / 5280
distm(rbind(cities, candidate)[, c("long", "lat")])* miles_per_meter
candidate_dist_matrix > 0
candidate_dist_matrix[candidate_dist_matrix > 0]
distm(rbind(cities, candidate)[, c("long", "lat")])* miles_per_meter
candidate_dist_matrix > 0
candidate_dist_matrix[candidate_dist_matrix > 0]
candidate_dist_matrix
candidate_dist_matrix[candidate_dist_matrix > 0]
min (candidate_dist_matrix[candidate_dist_matrix > 0])
candidates = subset(candidates, !(candidates$full.name %in% cities$full.name))
candidates
candidate = candidates[sample(nrow(candidates), 1),]
candidate
candidate_dist_matrix = distm(rbind(cities, candidate)[, c("long", "lat")]) * miles_per_meter
min(candidate_dist_matrix[candidate_dist_matrix > 0]) > min_dist
cities = rbind(cities, candidate)
cities
candidates = subset(candidates, !(candidates$full.name %in% cities$full.name))
candidate = candidates[sample(nrow(candidates), 1),]
min(candidate_dist_matrix[candidate_dist_matrix > 0]) > min_dist
candidate_dist_matrix = distm(rbind(cities, candidate)[, c("long", "lat")]) * miles_per_meter
cities = rbind(cities, candidate)
cities
cities = cities[order(cities$full.name),]
cities
cities$n = 1:nrow(cities)
cities
cities
cities = cities[order(cities$full.name),]
cities
map("world", col="#f3f3f3", fill=TRUE, lwd=0.2, mar=margins)
map("world", col="#f3f3f3", fill=TRUE, lwd=0.2)
map("usa", col="#f3f3f3", fill=TRUE, lwd=0.2)
map("colombia", col="#f3f3f3", fill=TRUE, lwd=0.2)
map("Columbia", col="#f3f3f3", fill=TRUE, lwd=0.2)
map("colombia", col="#f3f3f3", fill=TRUE, lwd=0.2)
map("usa", col="#f3f3f3", fill=TRUE, lwd=0.2)
map("Argentina", col="#f3f3f3", fill=TRUE, lwd=0.2)
map('italy', fill = TRUE, col = 1:10)
map('lakes', add=TRUE, fill=TRUE, col='white', boundary='black')
map("world", col="#f3f3f3", fill=TRUE, lwd=0.2)
map('lakes', add=TRUE, fill=TRUE, col='white', boundary='black')
map('usa') # national boundaries
map('county', 'new jersey') # county map of New Jersey
map("world", "China")
map("world", "Colombia")
map.cities(country = "Colombia"
)
colombia=map.cities(country = "Colombia")
colombia
data(us.cities)
map.cities(us.cities, country="NJ")
map.cities
colombia=map.cities(country = "Colombia")
map.cities(country = "Colombia")
map.cities(country = "Colombia")
map.cities(country = "Colombia")
map("world", "Colombia")
data(franceMapEnv)
map('france', fill = TRUE, col = 1:10)
map('colombia', fill = TRUE, col = 1:10)
map("world", "Colombia")
map.cities(country = "Colombia")
map("state")
map("Colombia")
map("world", "Colombia")
map("state")
map("world", "Colombia")
map.scale()
map.where("nz", 174.6, -36.92)
cities
pairs = combn(cities$n, 2)
pairs
key = paste(sort(pairs[,1]), collapse="_")
key
key = paste(sort(pairs[,2]), collapse="_")
key
key = paste(sort(pairs[,3]), collapse="_")
key
View(all_cities)
View(all_cities)
View(all_cities)
all_cities
all_cities[county.etc]
all_cities$county.etc
all_cities$country.etc
all_cities[all_cities$country.etc=="Colombia"]
all_cities[all_cities$country.etc %in% "Colombia"]
all_cities$country.etc %in% "Colombia"]
all_cities$country.etc %in% "Colombia"
all_cities$country.etc %in% "Colombia"
all_cities[all_cities$country.etc %in% "Colombia"]
all_cities[,all_cities$country.etc %in% "Colombia"]
all_cities[all_cities$country.etc %in% "Colombia",]
colombia=all_cities[all_cities$country.etc %in% "Colombia",]
saveRDS(colombia, "cities.rds")
runGitHub("AgenteViajero", "nelsonss")
cities= readRDS("C:\\Temporal\\shiny-salesman-master\\data\\cities.rds")
distance_matrix = readRDS("C:\\Temporal\\shiny-salesman-master\\data\\distance_matrix.rds")
great_circles = readRDS("C:\\Temporal\\shiny-salesman-master\\data\\great_circles.rds")
usa_cities = readRDS("C:\\Temporal\\shiny-salesman-master\\data\\usa_cities.rds")
cities
cities= readRDS("cities.rds")
distance_matrix = readRDS("distance_matrix.rds")
great_circles = readRDS("great_circles.rds")
usa_cities = readRDS("usa_cities.rds")
View(cities)
View(cities)
View(distance_matrix)
View(distance_matrix)
runGitHub("AgenteViajero", "nelsonss")
cities= readRDS("cities.rds")
distance_matrix = readRDS("distance_matrix.rds")
great_circles = readRDS("great_circles.rds")
usa_cities = readRDS("usa_cities.rds")
View(cities)
View(cities)
runGitHub("AgenteViajero", "nelsonss")
View(current_temperature)
View(current_temperature)
View(current_temperature)
View(current_temperature)
View(calculate_great_circles)
View(calculate_great_circles)
